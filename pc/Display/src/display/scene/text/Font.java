/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package display.scene.text;

/**
 *
 * @author Jakob Wenzel
 */
public class Font {
    
//Font data from glcd-arduino, http://code.google.com/p/glcd-arduino/source/browse/trunk/glcd/fonts/SystemFont5x7.h
//licensed under LGPL
final static int[] font = {
    0x20, // first char
    0x60, // char count
    
    // font data
    0x0, 0x0, 0x0, 0x0, 0x0,// (space)
	0x0, 0x0, 0xbe, 0x0, 0x0,// !
	0x0, 0xe, 0x0, 0xe, 0x0,// "
	0x28, 0xfe, 0x28, 0xfe, 0x28,// #
	0x48, 0x54, 0xfe, 0x54, 0x24,// $
	0x46, 0x26, 0x10, 0xc8, 0xc4,// %
	0x6c, 0x92, 0xaa, 0x44, 0xa0,// &
	0x0, 0xa, 0x6, 0x0, 0x0,// '
	0x0, 0x38, 0x44, 0x82, 0x0,// (
	0x0, 0x82, 0x44, 0x38, 0x0,// )
	0x10, 0x54, 0x38, 0x54, 0x10,// *
	0x10, 0x10, 0x7c, 0x10, 0x10,// +
	0x0, 0xa0, 0x60, 0x0, 0x0,// ,
	0x10, 0x10, 0x10, 0x10, 0x10,// -
	0x0, 0xc0, 0xc0, 0x0, 0x0,// .
	0x40, 0x20, 0x10, 0x8, 0x4,// /
	0x7c, 0xa2, 0x92, 0x8a, 0x7c,// 0
	0x0, 0x84, 0xfe, 0x80, 0x0,// 1
	0x84, 0xc2, 0xa2, 0x92, 0x8c,// 2
	0x42, 0x82, 0x8a, 0x96, 0x62,// 3
	0x30, 0x28, 0x24, 0xfe, 0x20,// 4
	0x4e, 0x8a, 0x8a, 0x8a, 0x72,// 5
	0x78, 0x94, 0x92, 0x92, 0x60,// 6
	0x2, 0xe2, 0x12, 0xa, 0x6,// 7
	0x6c, 0x92, 0x92, 0x92, 0x6c,// 8
	0xc, 0x92, 0x92, 0x52, 0x3c,// 9
	0x0, 0x6c, 0x6c, 0x0, 0x0,// :
	0x0, 0xac, 0x6c, 0x0, 0x0,// ;
	0x0, 0x10, 0x28, 0x44, 0x82,// <
	0x28, 0x28, 0x28, 0x28, 0x28,// =
	0x82, 0x44, 0x28, 0x10, 0x0,// >
	0x4, 0x2, 0xa2, 0x12, 0xc,// ?
	0x64, 0x92, 0xf2, 0x82, 0x7c,// @
	0xfc, 0x22, 0x22, 0x22, 0xfc,// A
	0xfe, 0x92, 0x92, 0x92, 0x6c,// B
	0x7c, 0x82, 0x82, 0x82, 0x44,// C
	0xfe, 0x82, 0x82, 0x44, 0x38,// D
	0xfe, 0x92, 0x92, 0x92, 0x82,// E
	0xfe, 0x12, 0x12, 0x2, 0x2,// F
	0x7c, 0x82, 0x82, 0xa2, 0x64,// G
	0xfe, 0x10, 0x10, 0x10, 0xfe,// H
	0x0, 0x82, 0xfe, 0x82, 0x0,// I
	0x40, 0x80, 0x82, 0x7e, 0x2,// J
	0xfe, 0x10, 0x28, 0x44, 0x82,// K
	0xfe, 0x80, 0x80, 0x80, 0x80,// L
	0xfe, 0x4, 0x8, 0x4, 0xfe,// M
	0xfe, 0x8, 0x10, 0x20, 0xfe,// N
	0x7c, 0x82, 0x82, 0x82, 0x7c,// O
	0xfe, 0x12, 0x12, 0x12, 0xc,// P
	0x7c, 0x82, 0xa2, 0x42, 0xbc,// Q
	0xfe, 0x12, 0x32, 0x52, 0x8c,// R
	0x8c, 0x92, 0x92, 0x92, 0x62,// S
	0x2, 0x2, 0xfe, 0x2, 0x2,// T
	0x7e, 0x80, 0x80, 0x80, 0x7e,// U
	0x3e, 0x40, 0x80, 0x40, 0x3e,// V
	0xfe, 0x40, 0x30, 0x40, 0xfe,// W
	0xc6, 0x28, 0x10, 0x28, 0xc6,// X
	0x6, 0x8, 0xf0, 0x8, 0x6,// Y
	0xc2, 0xa2, 0x92, 0x8a, 0x86,// Z
	0x0, 0x0, 0xfe, 0x82, 0x82,// [
	0x4, 0x8, 0x10, 0x20, 0x40,// "\"
	0x82, 0x82, 0xfe, 0x0, 0x0,// ]
	0x8, 0x4, 0x2, 0x4, 0x8,// ^
	0x80, 0x80, 0x80, 0x80, 0x80,// _
	0x0, 0x2, 0x4, 0x8, 0x0,// `
	0x40, 0xa8, 0xa8, 0xa8, 0xf0,// a
	0xfe, 0x90, 0x88, 0x88, 0x70,// b
	0x70, 0x88, 0x88, 0x88, 0x40,// c
	0x70, 0x88, 0x88, 0x90, 0xfe,// d
	0x70, 0xa8, 0xa8, 0xa8, 0x30,// e
	0x10, 0xfc, 0x12, 0x2, 0x4,// f
	0x10, 0x28, 0xa8, 0xa8, 0x78,// g
	0xfe, 0x10, 0x8, 0x8, 0xf0,// h
	0x0, 0x88, 0xfa, 0x80, 0x0,// i
	0x40, 0x80, 0x88, 0x7a, 0x0,// j
	0x0, 0xfe, 0x20, 0x50, 0x88,// k
	0x0, 0x82, 0xfe, 0x80, 0x0,// l
	0xf8, 0x8, 0x30, 0x8, 0xf0,// m
	0xf8, 0x10, 0x8, 0x8, 0xf0,// n
	0x70, 0x88, 0x88, 0x88, 0x70,// o
	0xf8, 0x28, 0x28, 0x28, 0x10,// p
	0x10, 0x28, 0x28, 0x30, 0xf8,// q
	0xf8, 0x10, 0x8, 0x8, 0x10,// r
	0x90, 0xa8, 0xa8, 0xa8, 0x40,// s
	0x8, 0x7e, 0x88, 0x80, 0x40,// t
	0x78, 0x80, 0x80, 0x40, 0xf8,// u
	0x38, 0x40, 0x80, 0x40, 0x38,// v
	0x78, 0x80, 0x60, 0x80, 0x78,// w
	0x88, 0x50, 0x20, 0x50, 0x88,// x
	0x18, 0xa0, 0xa0, 0xa0, 0x78,// y
	0x88, 0xc8, 0xa8, 0x98, 0x88,// z
	0x0, 0x10, 0x6c, 0x82, 0x0,// {
	0x0, 0x0, 0xfe, 0x0, 0x0,// |
	0x0, 0x82, 0x6c, 0x10, 0x0,// }
	0x10, 0x10, 0x54, 0x38, 0x10,// ->
	0x10, 0x38, 0x54, 0x10, 0x10 // <-
    
};

/**
 * Get the pixel data for the given character, or, if not available, the data
 * for the fallback character.
 * @param c The character to which the data should be returned
 * @param fallback The char which should be rendered if the requested char is 
 * not available. If this is null or also not available, the return value will 
 * also be null.
 * @return The given Char's pixels.
 */
public int[] getCharacter(char c,Character fallback) {
    
    int firstChar=font[0];
    int charCount=font[1];
    //Is the char available?
    if (c>=firstChar && c<(firstChar+charCount)) {
        //Then copy data to output
        int[] res = new int[5];
        int offset = (c-firstChar)*5+2;
        for (int i=0;i<5;i++) {
            res[i]=font[i+offset];            
        }
        return res;
    } else if (fallback!=null)
        return getCharacter(fallback,null);
    else return null;
}

}
