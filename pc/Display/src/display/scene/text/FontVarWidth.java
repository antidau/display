/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package display.scene.text;

import java.util.HashMap;

/**
 *
 * @author Jakob Wenzel
 */
public class FontVarWidth extends Font {

    HashMap<Character, int[]> map = new HashMap<Character, int[]>();

    public FontVarWidth() {

        //Font data from glcd-arduino, http://code.google.com/p/glcd-arduino/source/browse/trunk/glcd/fonts/SystemFont5x7.h
        //Shifted one bit to the left to make space for Umlauts
        //licensed under LGPL
        map.put(' ', new int[]{0x00, 0x00, 0x00, 0x00, 0x00});
        map.put('!', new int[]{0x00, 0xbe});
        map.put('"', new int[]{0x0e, 0x00, 0x0e});
        map.put('#', new int[]{0x28, 0xfe, 0x28, 0xfe, 0x28});
        map.put('$', new int[]{0x48, 0x54, 0xfe, 0x54, 0x24});
        map.put('%', new int[]{0x46, 0x26, 0x10, 0xc8, 0xc4});
        map.put('&', new int[]{0x6c, 0x92, 0xaa, 0x44, 0xa0});
        map.put('\'', new int[]{0x00, 0x0a, 0x06, 0x00});
        map.put('(', new int[]{0x38, 0x44, 0x82});
        map.put(')', new int[]{0x82, 0x44, 0x38});
        map.put('*', new int[]{0x10, 0x54, 0x38, 0x54, 0x10});
        map.put('+', new int[]{0x10, 0x10, 0x7c, 0x10, 0x10});
        map.put(',', new int[]{0xa0, 0x60});
        map.put('-', new int[]{0x10, 0x10, 0x10, 0x10, 0x10});
        map.put('.', new int[]{0xc0, 0xc0});
        map.put('/', new int[]{0x40, 0x20, 0x10, 0x08, 0x04});
        map.put('0', new int[]{0x7c, 0xa2, 0x92, 0x8a, 0x7c});
        map.put('1', new int[]{0x84, 0xfe, 0x80});
        map.put('2', new int[]{0x84, 0xc2, 0xa2, 0x92, 0x8c});
        map.put('3', new int[]{0x42, 0x82, 0x8a, 0x96, 0x62});
        map.put('4', new int[]{0x30, 0x28, 0x24, 0xfe, 0x20});
        map.put('5', new int[]{0x4e, 0x8a, 0x8a, 0x8a, 0x72});
        map.put('6', new int[]{0x78, 0x94, 0x92, 0x92, 0x60});
        map.put('7', new int[]{0x02, 0xe2, 0x12, 0x0a, 0x06});
        map.put('8', new int[]{0x6c, 0x92, 0x92, 0x92, 0x6c});
        map.put('9', new int[]{0x0c, 0x92, 0x92, 0x52, 0x3c});
        map.put(':', new int[]{ 0x6c, 0x6c});
        map.put(';', new int[]{ 0xac, 0x6c});
        map.put('<', new int[]{ 0x10, 0x28, 0x44, 0x82});
        map.put('=', new int[]{0x28, 0x28, 0x28, 0x28, 0x28});
        map.put('>', new int[]{0x82, 0x44, 0x28, 0x10});
        map.put('?', new int[]{0x04, 0x02, 0xa2, 0x12, 0x0c});
        map.put('@', new int[]{0x64, 0x92, 0xf2, 0x82, 0x7c});
        map.put('A', new int[]{0xfc, 0x22, 0x22, 0x22, 0xfc});
        map.put('B', new int[]{0xfe, 0x92, 0x92, 0x92, 0x6c});
        map.put('C', new int[]{0x7c, 0x82, 0x82, 0x82, 0x44});
        map.put('D', new int[]{0xfe, 0x82, 0x82, 0x44, 0x38});
        map.put('E', new int[]{0xfe, 0x92, 0x92, 0x92, 0x82});
        map.put('F', new int[]{0xfe, 0x12, 0x12, 0x02, 0x02});
        map.put('G', new int[]{0x7c, 0x82, 0x82, 0xa2, 0x64});
        map.put('H', new int[]{0xfe, 0x10, 0x10, 0x10, 0xfe});
        map.put('I', new int[]{0x82, 0xfe, 0x82});
        map.put('J', new int[]{0x40, 0x80, 0x82, 0x7e, 0x02});
        map.put('K', new int[]{0xfe, 0x10, 0x28, 0x44, 0x82});
        map.put('L', new int[]{0xfe, 0x80, 0x80, 0x80, 0x80});
        map.put('M', new int[]{0xfe, 0x04, 0x08, 0x04, 0xfe});
        map.put('N', new int[]{0xfe, 0x08, 0x10, 0x20, 0xfe});
        map.put('O', new int[]{0x7c, 0x82, 0x82, 0x82, 0x7c});
        map.put('P', new int[]{0xfe, 0x12, 0x12, 0x12, 0x0c});
        map.put('Q', new int[]{0x7c, 0x82, 0xa2, 0x42, 0xbc});
        map.put('R', new int[]{0xfe, 0x12, 0x32, 0x52, 0x8c});
        map.put('S', new int[]{0x8c, 0x92, 0x92, 0x92, 0x62});
        map.put('T', new int[]{0x02, 0x02, 0xfe, 0x02, 0x02});
        map.put('U', new int[]{0x7e, 0x80, 0x80, 0x80, 0x7e});
        map.put('V', new int[]{0x3e, 0x40, 0x80, 0x40, 0x3e});
        map.put('W', new int[]{0xfe, 0x40, 0x30, 0x40, 0xfe});
        map.put('X', new int[]{0xc6, 0x28, 0x10, 0x28, 0xc6});
        map.put('Y', new int[]{0x06, 0x08, 0xf0, 0x08, 0x06});
        map.put('Z', new int[]{0xc2, 0xa2, 0x92, 0x8a, 0x86});
        map.put('[', new int[]{0xfe, 0x82, 0x82});
        map.put('\\', new int[]{0x04, 0x08, 0x10, 0x20, 0x40});
        map.put(']', new int[]{0x82, 0x82, 0xfe});
        map.put('^', new int[]{0x08, 0x04, 0x02, 0x04, 0x08});
        map.put('_', new int[]{0x80, 0x80, 0x80, 0x80, 0x80});
        map.put('`', new int[]{0x02, 0x04, 0x08});
        map.put('a', new int[]{0x40, 0xa8, 0xa8, 0xa8, 0xf0});
        map.put('b', new int[]{0xfe, 0x90, 0x88, 0x88, 0x70});
        map.put('c', new int[]{0x70, 0x88, 0x88, 0x88, 0x40});
        map.put('d', new int[]{0x70, 0x88, 0x88, 0x90, 0xfe});
        map.put('e', new int[]{0x70, 0xa8, 0xa8, 0xa8, 0x30});
        map.put('f', new int[]{0x10, 0xfc, 0x12, 0x02, 0x04});
        map.put('g', new int[]{0x10, 0x28, 0xa8, 0xa8, 0x78});
        map.put('h', new int[]{0xfe, 0x10, 0x08, 0x08, 0xf0});
        map.put('i', new int[]{0x88, 0xfa, 0x80});
        map.put('j', new int[]{0x40, 0x80, 0x88, 0x7a});
        map.put('k', new int[]{0xfe, 0x20, 0x50, 0x88});
        map.put('l', new int[]{0x82, 0xfe, 0x80});
        map.put('m', new int[]{0xf8, 0x08, 0x30, 0x08, 0xf0});
        map.put('n', new int[]{0xf8, 0x10, 0x08, 0x08, 0xf0});
        map.put('o', new int[]{0x70, 0x88, 0x88, 0x88, 0x70});
        map.put('p', new int[]{0xf8, 0x28, 0x28, 0x28, 0x10});
        map.put('q', new int[]{0x10, 0x28, 0x28, 0x30, 0xf8});
        map.put('r', new int[]{0xf8, 0x10, 0x08, 0x08, 0x10});
        map.put('s', new int[]{0x90, 0xa8, 0xa8, 0xa8, 0x40});
        map.put('t', new int[]{0x08, 0x7e, 0x88, 0x80, 0x40});
        map.put('u', new int[]{0x78, 0x80, 0x80, 0x40, 0xf8});
        map.put('v', new int[]{0x38, 0x40, 0x80, 0x40, 0x38});
        map.put('w', new int[]{0x78, 0x80, 0x60, 0x80, 0x78});
        map.put('x', new int[]{0x88, 0x50, 0x20, 0x50, 0x88});
        map.put('y', new int[]{0x18, 0xa0, 0xa0, 0xa0, 0x78});
        map.put('z', new int[]{0x88, 0xc8, 0xa8, 0x98, 0x88});
        map.put('{', new int[]{0x10, 0x6c, 0x82});
        map.put('|', new int[]{0x00,0xfe, 0x00});
        map.put('}', new int[]{0x82, 0x6c, 0x10});

        map.put('Ä', new int[]{0xf8, 0x25, 0x24, 0x25, 0xf8});
        map.put('Ö', new int[]{0x78, 0x85, 0x84, 0x85, 0x78});
        map.put('Ü', new int[]{0x7c, 0x81, 0x80, 0x81, 0x7c});
        map.put('ä', new int[]{0x40, 0xaa, 0xa8, 0xaa, 0xf0});
        map.put('ö', new int[]{0x70, 0x8a, 0x88, 0x8a, 0x70});
        map.put('ü', new int[]{0x78, 0x82, 0x80, 0x42, 0xf8});
        map.put('ß', new int[]{0xFE, 0x01, 0x49, 0x49, 0x36});
    }

    /**
     * Get the pixel data for the given character, or, if not available, the
     * data for the fallback character.
     *
     * @param c The character to which the data should be returned
     * @param fallback The char which should be rendered if the requested char
     * is not available. If this is null or also not available, the return value
     * will also be null.
     * @return The given Char's pixels.
     */
    public int[] getCharacter(char c, Character fallback) {
        int[] res = map.get(c);
        if (res != null) {
            return res;
        }
        if (fallback == null) {
            return null;
        }
        return map.get(fallback);
    }

    /**
     * Get the pixel data for the given character
     *
     * @param c The character to which the data should be returned
     * @return The given Char's pixels or null if not available.
     */
    public int[] getCharacter(char c) {
        return map.get(c);
    }
}
